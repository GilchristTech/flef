#!/usr/bin/bash -e

function flef-usage () {
  echo "Usage: flef [project_name|last|help]"
  echo "  no arguments    Go to the last project from today, or create a new one."
  echo "  project_name    Create a project directory with the provided name"
  echo "                  (e.g., flef my-project)"
  echo "  last            Move into the last modified flef directory"
  echo "  help            Show this usage outline"
}


function flef-find () {
  # Runs the find command, inside the flef base directory,
  # filtering for directories directly under it, and print
  # their modified dates and names (separated by a tab)

  find "${FLEF_DIR}" -mindepth 1 -maxdepth 1 -type d -printf '%T@\t%p\n' $@
  return $?
}


function flef-main () {
  FLEF_DIR="${FLEF_DIR:-"$HOME/flef"}"
  FLEF_DATEFORMAT="${FLEF_DATEFORMAT:-%y-%m-%d}"

  # Create ~/flef/ if it does not exist

  if [[ ! ( -d "${FLEF_DIR}" ) ]] ; then
    mkdir "${FLEF_DIR}"
  fi

  DATE="$(date +"${FLEF_DATEFORMAT}")"
  FLEETING_DIR="${FLEF_DIR}/$DATE"

  if [[ $1 == 'help' ]]; then
    flef-usage
    exit 0

  elif [[ $1 == 'last' ]] ; then
    # Find the last modified flef directory

    RECENT_FLEETING_DIR=$(
        flef-find | sort -n | tail -n 1 | cut -f2
    )

    if [[ $RECENT_FLEETING_DIR ]] ; then
        FLEETING_DIR="${RECENT_FLEETING_DIR}"
    else
        echo "No last modified flef directory"
        exit 1
    fi

  elif [[ $1 ]] ; then
    # Use a flef directory with a given name, creating it if needed

    FLEETING_DIR="${FLEETING_DIR}_${1}"

  else
    # Find the most recently modified flef directory with the current date

    RECENT_FLEETING_DIR=$(
        flef-find -name "$DATE*" | sort -n | tail -n 1 | cut -f2
    )

    if [[ "$RECENT_FLEETING_DIR" ]] ; then
        FLEETING_DIR="${RECENT_FLEETING_DIR}"
    fi
  fi

  # If the fleeting directory doesn't exist, create it

  if [[ ! ( -d "$FLEETING_DIR" || -L "$FLEETING_DIR") ]] ; then
    mkdir "$FLEETING_DIR"
  fi

  if [ ! $FLEF_USE_SOURCE ] ; then
    echo "Starting a new shell"
  fi

  echo $FLEETING_DIR
  cd "$FLEETING_DIR"

  # Look for Python virtual environments

  if [ $FLEF_USE_SOURCE ] ; then
    # If this script is being sourced, directly source the virtual environment, if it exists

    if [[ -d "./venv" ]] ; then 
      source ./venv/bin/activate
    fi

    if [[ -d "./env"  ]] ; then 
      source ./env/bin/activate
    fi
  else
    # Detect Python virtualenv directories, and inject them into the shell

    VIRTUALENV_EXEC=""

    if [[ -d "./venv" ]] ; then 
      VIRTUALENV_EXEC='source ./venv/bin/activate ;'
    fi

    if [[ -d "./env"  ]] ; then 
      VIRTUALENV_EXEC='source ./env/bin/activate ;'
    fi

    bash -c "$VIRTUALENV_EXEC exec $SHELL"
  fi
}

flef-main $@
